{"version":3,"sources":["components/TableLayoutWrapper/index.js","constants/statusCodes.js","services/api/client.js","services/api/posts.js","components/AddEditPostModal/index.js","components/Posts/index.js"],"names":["TableLayoutWrapper","title","button","children","className","Object","freeze","OK","CREATED","ACCEPTED","BAD_REQUEST","UNAUTHORIZED","FORBIDDEN","NOT_FOUND","UNPROCESSABLE_ENTITY","INTERNAL_SERVER_ERROR","HttpClient","axios","create","baseURL","interceptors","request","use","config","token","getToken","isEmpty","headers","error","Promise","reject","response","msg","statusCode","get","HttpStatusCode","removeUser","removeToken","window","location","href","includes","console","log","message","I18n","t","withRouter","RESOURCE_NAME","params","post","id","delete","patch","Item","Form","useForm","TextArea","Input","AddEditPostModal","editSelectedRow","closeDialog","useTranslation","postForm","useState","loading","setLoading","body","setBody","handleSubmit","data","validateFields","then","editPost","addPost","PostsService","success","payload","edit","value","finally","catch","e","validateMessages","required","useEffect","footer","width","visible","maskClosable","onCancel","layout","form","onFinish","initialValues","name","label","rules","placeholder","rows","onChange","target","onClick","getFieldsValue","Posts","posts","setPosts","setEditSelectedRow","toggleAddEditPostModal","setToggleAddEditPostModal","columns","key","index","dataIndex","render","_","row","EditOutlined","placement","okText","cancelText","onConfirm","removePost","DeleteOutlined","filter","info","isMounted","res","slice","map","item","size","scroll","x","dataSource","showSorterTooltip","pagination","idx","findIndex","length"],"mappings":"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","file":"static/js/5.255c3c5c.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst TableLayoutWrapper = ({title, button, children}) => (\n    <div className=\"w-full bg-white rounded-lg\">\n        <div className=\"py-3 px-5 flex justify-between items-center\">\n            <p className=\"text-xl font-bold\">{title}</p>\n            {button}\n        </div>\n        <div className=\"px-4\">\n            {children}\n        </div>\n    </div>\n);\n\nTableLayoutWrapper.propTypes = {\n    button: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n};\n\nexport default TableLayoutWrapper;","export default Object.freeze({\n    /**\n     * Standard response for successful HTTP requests.\n     * The actual response will depend on the request method used.\n     * In a GET request, the response will contain an entity corresponding to the requested resource.\n     * In a POST request, the response will contain an entity describing or containing the result of the action.\n     */\n    OK: 200,\n\n    /**\n     * The request has been fulfilled, resulting in the creation of a new resource.\n     */\n    CREATED: 201,\n\n    /**\n     * The request has been accepted for processing, but the processing has not been completed.\n     * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n     */\n    ACCEPTED: 202,\n\n    /**\n     * The server cannot or will not process the request due to an apparent client error\n     * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n     */\n    BAD_REQUEST: 400,\n\n    /**\n     * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n     * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n     * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n     * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n     */\n    UNAUTHORIZED: 401,\n\n    /**\n     * The request was valid, but the server is refusing action.\n     * The user might not have the necessary permissions for a resource.\n     */\n    FORBIDDEN: 403,\n\n    /**\n     * The requested resource could not be found but may be available in the future.\n     * Subsequent requests by the client are permissible.\n     */\n    NOT_FOUND: 404,\n\n    /**\n     * The request was well-formed but was unable to be followed due to semantic errors.\n     */\n    UNPROCESSABLE_ENTITY: 422,\n\n    /**\n     * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n     */\n    INTERNAL_SERVER_ERROR: 500,\n});\n","import React from 'react';\nimport axios from 'axios';\nimport {message} from \"antd\";\nimport { withRouter } from 'react-router';\nimport { get, isEmpty, includes } from 'lodash-es';\n\nimport { getToken, removeUser, removeToken } from '../../helpers/storage.helper';\nimport HttpStatusCode from '../../constants/statusCodes';\nimport I18n from '../../I18n/config';\n\nconst HttpClient = axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com/'\n});\n\nHttpClient.interceptors.request.use(\n    config => {\n        const token = getToken();\n\n        if (!isEmpty(token)) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        return config;\n    },\n    error => {\n        return Promise.reject(error);\n    }\n);\n\nHttpClient.interceptors.response.use(\n    response => {\n        return response;\n    },\n    error => {\n        let msg;\n        let statusCode = get(error, 'response.status', HttpStatusCode.INTERNAL_SERVER_ERROR);\n\n        if (statusCode === HttpStatusCode.UNAUTHORIZED) {\n            removeUser();\n            removeToken();\n            return (window.location.href = '/login');\n        } else if (includes([HttpStatusCode.BAD_REQUEST, HttpStatusCode.FORBIDDEN], statusCode)) {\n            msg = get(error, 'response.data.message');\n        } else if (statusCode >= HttpStatusCode.INTERNAL_SERVER_ERROR) {\n            msg = 'err_internal';\n        }\n\n        if (!isEmpty(msg)) {\n            console.log(msg)\n            message.error(I18n.t(`error.${msg}`));\n        }\n\n        return Promise.reject(error);\n    }\n);\n\nexport default withRouter(HttpClient);\n","import HttpClient from './client';\n\nconst RESOURCE_NAME = '/posts';\n\nexport default {\n    addPost(params) {\n        return HttpClient.post(RESOURCE_NAME, params);\n    },\n\n    getPosts(params) {\n        return HttpClient.get(RESOURCE_NAME, { params });\n    },\n\n    deletePost(id) {\n        return HttpClient.delete(`${RESOURCE_NAME}/${id}`);\n    },\n\n    editPost(id, params) {\n        return HttpClient.patch(`${RESOURCE_NAME}/${id}`, params);\n    }\n};\n","import PropTypes from 'prop-types';\nimport {useTranslation} from 'react-i18next';\nimport React, {useEffect, useState} from 'react';\nimport {Modal, Button, Form, Input, Space, message} from 'antd';\n\nimport PostsService from \"../../services/api/posts\";\nimport I18n from '../../I18n/config';\n\nconst {Item, useForm} = Form;\nconst {TextArea} = Input;\n\nconst AddEditPostModal = ({editSelectedRow, closeDialog}) => {\n    const {t} = useTranslation();\n    const [postForm] = useForm();\n    const [loading, setLoading] = useState(false);\n    const [body, setBody] = useState('');\n\n    const handleSubmit = data => {\n        postForm.validateFields().then(() => {\n            if (editSelectedRow) {\n                editPost(data);\n            } else {\n                addPost(data);\n            }\n        });\n    };\n\n    const editPost = data => {\n        setLoading(true);\n        PostsService.editPost(editSelectedRow.id, data)\n            .then(() => {\n                message.success(I18n.t('messages.post_updated'));\n                closeDialog({payload: {edit: true, value: {...data, body} }});\n            })\n            .finally(() => setLoading(false));\n    };\n\n    const addPost = data => {\n        setLoading(true);\n        PostsService.addPost(data)\n            .then(() => {\n                message.success(I18n.t('messages.post_created'));\n                closeDialog({payload: {value: {...data, body} }});\n            })\n            .catch(e => console.log(e))\n            .finally(() => setLoading(false));\n    };\n\n    const setData = () => {\n        if (editSelectedRow) {\n            setBody(editSelectedRow.body)\n        }\n    };\n\n    const validateMessages = {\n        required: t('validation.required')\n    };\n\n    useEffect(setData, [editSelectedRow]);\n\n    return (\n        <Modal\n            footer={null}\n            width=\"600px\"\n            visible={true}\n            maskClosable={false}\n            onCancel={() => closeDialog()}\n            title={editSelectedRow ? t('editPost') : t('addPost')}\n        >\n            <div className=\"px-6\">\n                <Form\n                    layout=\"vertical\"\n                    form={postForm}\n                    onFinish={handleSubmit}\n                    initialValues={{\n                        ...editSelectedRow\n                    }}\n                    validateMessages={validateMessages}\n                >\n                    <Item name=\"title\" label={t('title')} rules={[{required: true}]}>\n                        <Input name=\"title\" placeholder={t('title')}/>\n                    </Item>\n                    <Item name=\"body\" label={t('body')} rules={[{required: true}]}>\n                        <TextArea name=\"body\" rows={4} placeholder={t('body')} value={body} onChange={e => setBody(e.target.value)}/>\n                    </Item>\n                    <Space className=\"flex justify-end items-center\">\n                        <Button loading={loading}\n                                onClick={() =>\n                                    handleSubmit({...postForm.getFieldsValue()})\n                                }>{t('auth.save')}</Button>\n                        <Button onClick={() => closeDialog()}>{t('cancel')}</Button>\n                    </Space>\n                </Form>\n            </div>\n        </Modal>\n    );\n};\n\nAddEditPostModal.propTypes = {\n    closeDialog: PropTypes.func,\n    editSelectedRow: PropTypes.shape({\n        id: PropTypes.number,\n        body: PropTypes.string,\n        title: PropTypes.string\n    })\n};\n\nexport default AddEditPostModal;\n","import {DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\nimport {Table, message, Popconfirm, Tooltip} from \"antd\";\nimport {useTranslation} from \"react-i18next\";\nimport {useEffect, useState} from \"react\";\nimport {isEmpty} from \"lodash-es\";\n\nimport TableLayoutWrapper from \"../TableLayoutWrapper\";\nimport PostsService from '../../services/api/posts';\nimport AddEditPostModal from \"../AddEditPostModal\";\nimport I18n from '../../I18n/config';\n\nconst Posts = () => {\n    const {t} = useTranslation();\n    const [posts, setPosts] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [editSelectedRow, setEditSelectedRow] = useState(null);\n    const [toggleAddEditPostModal, setToggleAddEditPostModal] = useState(false);\n\n    const columns = [\n        {\n            title: t('id'),\n            key: 'id',\n            index: 0,\n            width: 20,\n            dataIndex: 'id',\n            render: data => <span>{data}</span>\n        },\n        {\n            title: t('title'),\n            index: 1,\n            width: 700,\n            key: 'title',\n            dataIndex: 'title',\n            render: data => <span>{data}</span>\n        },\n        {\n            title: t('body'),\n            index: 2,\n            width: 700,\n            key: 'body',\n            dataIndex: 'body',\n            render: data => <span>{data}</span>\n        },\n        {\n            title: t('actions'),\n            key: 'actions',\n            width: 700,\n            render: (_, row) => (\n                <div className=\"flex items-baseline\">\n                    <Tooltip title={t('editPost')}>\n                        <p className=\"mx-2 cursor-pointer\" onClick={() => setEditSelectedRow(row)}><EditOutlined/></p>\n                    </Tooltip>\n                    <Tooltip title={t('removePost')}>\n                        <Popconfirm\n                            placement=\"topRight\"\n                            okText={t('yes')}\n                            cancelText={t('no')}\n                            onConfirm={() => removePost(row.id)}\n                            title={t('messages.delete_post_confirm')}\n                        >\n                            <DeleteOutlined/>\n                        </Popconfirm>\n                    </Tooltip>\n                </div>\n            )\n        }\n    ]\n\n    const getPosts = () => {\n        let isMounted = true;\n        if (isMounted) {\n            setLoading(true);\n            PostsService.getPosts()\n                .then(res => {\n                    const data = res.data.slice(0, 10).map(item => ({\n                        ...item,\n                        key: item.id\n                    }));\n                    if (isMounted) {\n                        setPosts(data);\n                    }\n                })\n                .catch(error => console.log(error))\n                .finally(() => setLoading(false));\n        }\n        return () => {\n            isMounted = false;\n        };\n    }\n\n    const removePost = id => {\n        setLoading(true);\n        PostsService.deletePost(id)\n            .then(() => {\n                setPosts(\n                    posts.filter(post => {\n                        return post.id !== id;\n                    })\n                );\n                message.info(I18n.t('messages.post_deleted'));\n            })\n            .finally(() => setLoading(false));\n    }\n\n    const handleCloseAddEditModal = ({payload} = {}) => {\n        setToggleAddEditPostModal(false);\n        if (!isEmpty(payload) && payload.value) {\n            if (payload.edit) {\n                const idx = posts.findIndex(post => post.id === editSelectedRow.id);\n                posts[idx] = payload.value;\n                payload.value.key = editSelectedRow.id;\n                payload.value.id = editSelectedRow.id;\n                setPosts([...posts]);\n            } else {\n                payload.value.key = posts.length + 1;\n                payload.value.id = posts.length + 1;\n                setPosts([...posts, payload.value]);\n            }\n        }\n        setEditSelectedRow(null);\n    };\n\n    const openAddEditPostModal = () => {\n        if (editSelectedRow) {\n            setToggleAddEditPostModal(true);\n        }\n    };\n\n    useEffect(getPosts, []);\n    useEffect(openAddEditPostModal, [editSelectedRow]);\n\n    return (\n        <>\n            <TableLayoutWrapper title={t('posts')} button={\n                <button className=\"bg-green-600 text-white text-sm py-3 px-10 font-bold focus:outline-none rounded\"\n                        onClick={() => setToggleAddEditPostModal(true)}>\n                    {t('addPost')}\n                </button>\n            }>\n                <Table\n                    size=\"small\"\n                    scroll={{x: 700}}\n                    dataSource={posts}\n                    loading={loading}\n                    columns={columns}\n                    showSorterTooltip={false}\n                    pagination={false}\n                />\n            </TableLayoutWrapper>\n            {toggleAddEditPostModal && (\n                <AddEditPostModal editSelectedRow={editSelectedRow} closeDialog={handleCloseAddEditModal}/>\n            )}\n        </>\n    );\n}\n\nexport default Posts;\n\n"],"sourceRoot":""}