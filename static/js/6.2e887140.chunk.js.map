{"version":3,"sources":["components/TableLayoutWrapper/index.js","constants/statusCodes.js","services/api/client.js","services/api/users.js","components/AddEditUserModal/index.js","components/Users/index.js"],"names":["TableLayoutWrapper","title","button","children","className","Object","freeze","OK","CREATED","ACCEPTED","BAD_REQUEST","UNAUTHORIZED","FORBIDDEN","NOT_FOUND","UNPROCESSABLE_ENTITY","INTERNAL_SERVER_ERROR","HttpClient","axios","create","baseURL","interceptors","request","use","config","token","getToken","isEmpty","headers","error","Promise","reject","response","msg","statusCode","get","HttpStatusCode","removeUser","removeToken","window","location","href","includes","console","log","message","I18n","t","withRouter","RESOURCE_NAME","params","post","id","delete","patch","Item","Form","useForm","AddEditUserModal","editSelectedRow","closeDialog","useTranslation","userForm","useState","loading","setLoading","handleSubmit","data","validateFields","then","editUser","addUser","UserService","success","payload","edit","value","finally","catch","e","validateMessages","required","footer","width","visible","maskClosable","onCancel","layout","form","onFinish","initialValues","name","label","rules","placeholder","type","onClick","getFieldsValue","Users","users","setUsers","setEditSelectedRow","toggleAddEditUserModal","setToggleAddEditUserModal","columns","key","index","dataIndex","render","_","row","EditOutlined","placement","okText","cancelText","onConfirm","DeleteOutlined","filter","user","info","useEffect","isMounted","res","map","item","size","scroll","x","dataSource","pagination","showSorterTooltip","idx","findIndex","length"],"mappings":"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","file":"static/js/6.2e887140.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst TableLayoutWrapper = ({title, button, children}) => (\n    <div className=\"w-full bg-white rounded-lg\">\n        <div className=\"py-3 px-5 flex justify-between items-center\">\n            <p className=\"text-xl font-bold\">{title}</p>\n            {button}\n        </div>\n        <div className=\"px-4\">\n            {children}\n        </div>\n    </div>\n);\n\nTableLayoutWrapper.propTypes = {\n    button: PropTypes.node.isRequired,\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n};\n\nexport default TableLayoutWrapper;","export default Object.freeze({\n    /**\n     * Standard response for successful HTTP requests.\n     * The actual response will depend on the request method used.\n     * In a GET request, the response will contain an entity corresponding to the requested resource.\n     * In a POST request, the response will contain an entity describing or containing the result of the action.\n     */\n    OK: 200,\n\n    /**\n     * The request has been fulfilled, resulting in the creation of a new resource.\n     */\n    CREATED: 201,\n\n    /**\n     * The request has been accepted for processing, but the processing has not been completed.\n     * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n     */\n    ACCEPTED: 202,\n\n    /**\n     * The server cannot or will not process the request due to an apparent client error\n     * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n     */\n    BAD_REQUEST: 400,\n\n    /**\n     * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n     * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n     * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n     * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n     */\n    UNAUTHORIZED: 401,\n\n    /**\n     * The request was valid, but the server is refusing action.\n     * The user might not have the necessary permissions for a resource.\n     */\n    FORBIDDEN: 403,\n\n    /**\n     * The requested resource could not be found but may be available in the future.\n     * Subsequent requests by the client are permissible.\n     */\n    NOT_FOUND: 404,\n\n    /**\n     * The request was well-formed but was unable to be followed due to semantic errors.\n     */\n    UNPROCESSABLE_ENTITY: 422,\n\n    /**\n     * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n     */\n    INTERNAL_SERVER_ERROR: 500,\n});\n","import React from 'react';\nimport axios from 'axios';\nimport {message} from \"antd\";\nimport { withRouter } from 'react-router';\nimport { get, isEmpty, includes } from 'lodash-es';\n\nimport { getToken, removeUser, removeToken } from '../../helpers/storage.helper';\nimport HttpStatusCode from '../../constants/statusCodes';\nimport I18n from '../../I18n/config';\n\nconst HttpClient = axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com/'\n});\n\nHttpClient.interceptors.request.use(\n    config => {\n        const token = getToken();\n\n        if (!isEmpty(token)) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        return config;\n    },\n    error => {\n        return Promise.reject(error);\n    }\n);\n\nHttpClient.interceptors.response.use(\n    response => {\n        return response;\n    },\n    error => {\n        let msg;\n        let statusCode = get(error, 'response.status', HttpStatusCode.INTERNAL_SERVER_ERROR);\n\n        if (statusCode === HttpStatusCode.UNAUTHORIZED) {\n            removeUser();\n            removeToken();\n            return (window.location.href = '/login');\n        } else if (includes([HttpStatusCode.BAD_REQUEST, HttpStatusCode.FORBIDDEN], statusCode)) {\n            msg = get(error, 'response.data.message');\n        } else if (statusCode >= HttpStatusCode.INTERNAL_SERVER_ERROR) {\n            msg = 'err_internal';\n        }\n\n        if (!isEmpty(msg)) {\n            console.log(msg)\n            message.error(I18n.t(`error.${msg}`));\n        }\n\n        return Promise.reject(error);\n    }\n);\n\nexport default withRouter(HttpClient);\n","import HttpClient from './client';\n\nconst RESOURCE_NAME = '/users';\n\nexport default {\n    addUser(params) {\n        return HttpClient.post(RESOURCE_NAME, params);\n    },\n\n    getUsers(params) {\n        return HttpClient.get(RESOURCE_NAME, { params });\n    },\n\n    deleteUser(id) {\n        return HttpClient.delete(`${RESOURCE_NAME}/${id}`);\n    },\n\n    editUser(id, params) {\n        return HttpClient.patch(`${RESOURCE_NAME}/${id}`, params);\n    }\n};\n","import PropTypes from 'prop-types';\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Modal, Button, Form, Input, Space, message} from 'antd';\n\nimport UserService from \"../../services/api/users\";\nimport I18n from '../../I18n/config';\n\nconst {Item, useForm} = Form;\n\nconst AddEditUserModal = ({editSelectedRow, closeDialog}) => {\n    const {t} = useTranslation();\n    const [userForm] = useForm();\n    const [loading, setLoading] = useState(false);\n\n    const handleSubmit = data => {\n        userForm.validateFields().then(() => {\n            if (editSelectedRow) {\n                editUser(data);\n            } else {\n                addUser(data);\n            }\n        });\n    };\n\n    const editUser = data => {\n        setLoading(true);\n        UserService.editUser(editSelectedRow.id, data)\n            .then(() => {\n                message.success(I18n.t('messages.user_updated'));\n                closeDialog({payload: {edit: true, value: data}});\n            })\n            .finally(() => setLoading(false));\n    };\n\n    const addUser = data => {\n        setLoading(true);\n        UserService.addUser(data)\n            .then(() => {\n                message.success(I18n.t('messages.user_created'));\n                closeDialog({payload: {value: data}});\n            })\n            .catch(e => console.log(e))\n            .finally(() => setLoading(false));\n    };\n\n    const validateMessages = {\n        required: t('validation.required')\n    };\n\n    return (\n        <Modal\n            footer={null}\n            width=\"600px\"\n            visible={true}\n            maskClosable={false}\n            onCancel={() => closeDialog()}\n            title={editSelectedRow ? t('editUser') : t('addUser')}\n        >\n            <div className=\"px-6\">\n                <Form\n                    layout=\"vertical\"\n                    form={userForm}\n                    onFinish={handleSubmit}\n                    initialValues={{\n                        ...editSelectedRow,\n                    }}\n                    validateMessages={validateMessages}\n                >\n                    <Item name=\"name\" label={t('name')} rules={[{required: true}]}>\n                        <Input name=\"name\" placeholder={t('name')}/>\n                    </Item>\n                    <Item name=\"username\" label={t('auth.username')} rules={[{required: true}]}>\n                        <Input name=\"username\" placeholder={t('auth.username')}/>\n                    </Item>\n                    <Item name=\"email\" label={t('email')} rules={[{required: true, type: 'email'}]}>\n                        <Input name=\"email\" type=\"email\" placeholder={t('email')}/>\n                    </Item>\n                    <Space className=\"flex justify-end items-center\">\n                        <Button loading={loading}\n                                onClick={() =>\n                                    handleSubmit({...userForm.getFieldsValue()})\n                                }>{t('auth.save')}</Button>\n                        <Button onClick={() => closeDialog()}>{t('cancel')}</Button>\n                    </Space>\n                </Form>\n            </div>\n        </Modal>\n    );\n};\n\nAddEditUserModal.propTypes = {\n    closeDialog: PropTypes.func,\n    editSelectedRow: PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        email: PropTypes.string,\n        username: PropTypes.string,\n    })\n};\n\nexport default AddEditUserModal;\n","import {isEmpty} from \"lodash-es\";\nimport {useEffect, useState} from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {Table, message, Popconfirm, Tooltip} from \"antd\";\nimport {DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\n\nimport TableLayoutWrapper from \"../TableLayoutWrapper\";\nimport AddEditUserModal from \"../AddEditUserModal\";\nimport UserService from '../../services/api/users';\nimport I18n from '../../I18n/config';\n\nconst Users = () => {\n    const {t} = useTranslation();\n    const [users, setUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [editSelectedRow, setEditSelectedRow] = useState(null);\n    const [toggleAddEditUserModal, setToggleAddEditUserModal] = useState(false);\n\n    const columns = [\n        {\n            title: t('id'),\n            key: 'id',\n            width: 30,\n            index: 0,\n            dataIndex: 'id',\n            render: data => <span>{data}</span>\n        },\n        {\n            title: t('name'),\n            index: 1,\n            width: 700,\n            key: 'name',\n            dataIndex: 'name',\n            render: data => <span>{data}</span>\n        },\n        {\n            title: t('auth.username'),\n            index: 2,\n            width: 700,\n            key: 'username',\n            dataIndex: 'username',\n            render: data => <span>{data}</span>\n        },\n        {\n            title: t('email'),\n            index: 3,\n            width: 700,\n            key: 'email',\n            dataIndex: 'email',\n            render: data => <span>{data}</span>\n        },\n        {\n            title: t('actions'),\n            key: 'actions',\n            width: 700,\n            render: (_, row) => (\n                <div className=\"flex items-baseline\">\n                    <Tooltip title={t('editUser')}>\n                        <p className=\"mx-2 cursor-pointer\" onClick={() => setEditSelectedRow(row)}>\n                            <EditOutlined/>\n                        </p>\n                    </Tooltip>\n                    <Tooltip title={t('removeUser')}>\n                        <Popconfirm\n                            placement=\"topRight\"\n                            okText={t('yes')}\n                            cancelText={t('no')}\n                            onConfirm={() => removeUser(row.id)}\n                            title={t('messages.delete_user_confirm')}\n                        >\n                            <DeleteOutlined/>\n                        </Popconfirm>\n                    </Tooltip>\n                </div>\n            )\n        }\n    ]\n\n    const getUsers = () => {\n        let isMounted = true;\n        if (isMounted) {\n            setLoading(true);\n            UserService.getUsers()\n                .then(res => {\n                    const data = res.data.map(item => ({\n                        ...item,\n                        key: item.id\n                    }));\n                    if (isMounted) {\n                        setUsers(data);\n                    }\n                })\n                .catch(error => console.log(error))\n                .finally(() => setLoading(false));\n        }\n        return () => {\n            isMounted = false;\n        };\n    }\n\n    const removeUser = id => {\n        setLoading(true);\n        UserService.deleteUser(id)\n            .then(() => {\n                setUsers(\n                    users.filter(user => {\n                        return user.id !== id;\n                    })\n                );\n                message.info(I18n.t('messages.user_deleted'));\n            })\n            .finally(() => setLoading(false));\n    }\n\n    const handleCloseAddEditModal = ({payload} = {}) => {\n        setToggleAddEditUserModal(false);\n        if (!isEmpty(payload) && payload.value) {\n            if (payload.edit) {\n                const idx = users.findIndex(user => user.id === editSelectedRow.id);\n                users[idx] = payload.value;\n                payload.value.key = editSelectedRow.id;\n                payload.value.id = editSelectedRow.id;\n                setUsers([...users]);\n            } else {\n                payload.value.key = users.length + 1;\n                payload.value.id = users.length + 1;\n                setUsers([...users, payload.value]);\n            }\n        }\n        setEditSelectedRow(null);\n    };\n\n    const openAddEditUserModal = () => {\n        if (editSelectedRow) {\n            setToggleAddEditUserModal(true);\n        }\n    };\n\n    useEffect(getUsers, []);\n    useEffect(openAddEditUserModal, [editSelectedRow]);\n\n    return (\n        <>\n            <TableLayoutWrapper title={t('users')} button={\n                <button className=\"bg-green-600 text-white text-sm py-3 px-10 font-bold focus:outline-none rounded\"\n                        onClick={() => setToggleAddEditUserModal(true)}>\n                    {t('addUser')}\n                </button>\n            }>\n                <Table\n                    size=\"small\"\n                    scroll={{x: 700}}\n                    dataSource={users}\n                    loading={loading}\n                    columns={columns}\n                    pagination={false}\n                    showSorterTooltip={false}\n                />\n            </TableLayoutWrapper>\n            {toggleAddEditUserModal && (\n                <AddEditUserModal editSelectedRow={editSelectedRow} closeDialog={handleCloseAddEditModal}/>\n            )}\n        </>\n    );\n}\n\nexport default Users;\n"],"sourceRoot":""}